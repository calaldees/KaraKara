#ROOT_PATH = os.path.dirname(__file__)

def _pytest_sessionstart():
    """
    Setup for multi processor support
    """
    # Only run database setup on master (in case of xdist/multiproc mode)
    if not hasattr(pytest.config, 'slaveinput'):
        from models import initialize_sql
        from pyramid.config import Configurator
        from paste.deploy.loadwsgi import appconfig
        from sqlalchemy import engine_from_config
        import os

        #ROOT_PATH = os.path.dirname(__file__)
        settings = appconfig('config:' + os.path.join(ROOT_PATH, INI))
        engine = engine_from_config(settings, prefix='sqlalchemy.')

        print(f'Creating the tables on the test database {engine}')

        config = Configurator(settings=settings)
        initialize_sql(settings, config)


@pytest.fixture(scope="session")
def DBSession(request, app):
    """
    Aquire DBSession from WebTest App
    """
    from ..model import DBSession
    # The WSGI app has already been started,
    # we can import the session safly knowing it has been setup
    return DBSession
    
    # NOTES --------------
    
    # Setup from cold
    from pyramid.paster import get_appsettings, setup_logging
    #setup_logging(args.config_uri)
    #logging.basicConfig(level=logging.INFO)
    settings = get_appsettings(INI)
    
    from ..model import init_DBSession, DBSession, commit
    from ..model.init_data import init_data

    init_DBSession(settings)
    init_data()
    
    def finalizer():
        print('finalze db')
        commit()
    request.addfinalizer(finalizer)
    
    return DBSession





# http://sontek.net/blog/detail/writing-tests-for-pyramid-and-sqlalchemy

import unittest
import pyramid.testing
from paste.deploy.loadwsgi import appconfig

#from webtest import TestApp
#from mock import Mock

#from sqlalchemy import engine_from_config
#import sqlalchemy.orm
#from app.db import Session
#from app.db import Entity  # base declarative object
#from app import main
#import os
#here = os.path.dirname(__file__)
#settings = appconfig('config:' + os.path.join(here, '../../', 'test.ini'))

from pyramid.paster import get_appsettings
settings = get_appsettings('test.ini')

class BaseTestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.engine = engine_from_config(settings, prefix='sqlalchemy.')
        cls.Session = sqlalchemy.orm.sessionmaker()

    def setUp(self):
        connection = self.engine.connect()
        # begin a non-ORM transaction
        self.trans = connection.begin()
        # bind an individual Session to the connection
        Session.configure(bind=connection)
        self.session = self.Session(bind=connection)
        Entity.session = self.session

    def tearDown(self):
        # rollback - everything that happened with the
        # Session above (including calls to commit())
        # is rolled back.
        testing.tearDown()
        self.trans.rollback()
        self.session.close()


class UnitTestBase(BaseTestCase):
    def setUp(self):
        self.config = pyramid.testing.setUp(request=pyramid.testing.DummyRequest())
        super(UnitTestBase, self).setUp()

    def get_csrf_request(self, post=None):
        csrf = 'abc'

        if not 'csrf_token' in post.keys():
            post.update({
                'csrf_token': csrf
            })

        request = pyramid.testing.DummyRequest(post)

        request.session = Mock()
        csrf_token = Mock()
        csrf_token.return_value = csrf

        request.session.get_csrf_token = csrf_token

        return request


#class IntegrationTestBase(BaseTestCase):
class IntegrationTestBase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.app = main({}, **settings)
        super(IntegrationTestBase, cls).setUpClass()

    def setUp(self):
        self.app = TestApp(self.app)
        self.config = testing.setUp()
        super(IntegrationTestBase, self).setUp()
        
        





import pytest

import logging
log = logging.getLogger(__name__)

import pyramid.request



#@pytest.fixture(autouse=True)
class TestKaraKara():
    @classmethod
    def setup_class(cls):
        """
        """
        log.info("setup")
        log.debug("debug test message")
        log.info("info test message")
        log.warn("warning test message")
        log.error("error test message")
    
    @classmethod
    def teardown_class(cls):
        """
        """
        log.info("teardown")
    
    #def test_example(self, example):
    #    print(f'example {example}')
    #    assert False

    def test_db(self, tracks):
        pass
        #print('base_data')
        #assert False
        



class TestViews(UnitTestBase):
    def test_login_fails_empty(self):
        """ Make sure we can't login with empty credentials"""
        from app.accounts.views import LoginView
        self.config.add_route('index', '/')
        self.config.add_route('dashboard', '/')

        request = testing.DummyRequest(post={
            'submit': True,
        })

        view = LoginView(request)
        response = view.post()
        errors = response['errors']

        assert errors[0].node.name == u'csrf_token'
        assert errors[0].msg == u'Required'
        assert errors[1].node.name == u'Username'
        assert errors[1].msg == u'Required'
        assert errors[2].node.name == u'Password'
        assert errors[2].msg == u'Required'


    def test_login_succeeds(self):
        """ Make sure we can login """
        admin = User(username='sontek', password='temp', kind=u'admin')
        admin.activated = True
        self.session.add(admin)
        self.session.flush()

        from app.accounts.views import LoginView
        self.config.add_route('index', '/')
        self.config.add_route('dashboard', '/dashboard')

        request = self.get_csrf_request(post={
                'submit': True,
                'Username': 'sontek',
                'Password': 'temp',
            })

        view = LoginView(request)
        response = view.post()

        assert response.status_int == 302
        
#-------------------------------------------------------------------------------

class TestViews(IntegrationTestBase):
    def test_get_login(self):
        """ Call the login view, make sure routes are working """
        res = self.app.get('/login')
        self.assertEqual(res.status_int, 200)

    def test_empty_login(self):
        """ Empty login fails """
        res = self.app.post('/login', {'submit': True})

        assert "There was a problem with your submission" in res.body
        assert "Required" in res.body
        assert res.status_int == 200

    def test_valid_login(self):
        """ Call the login view, make sure routes are working """
        admin = User(username='sontek', password='temp', kind=u'admin')
        admin.activated = True
        self.session.add(admin)
        self.session.flush()

        res = self.app.get('/login')

        csrf = res.form.fields['csrf_token'][0].value

        res = self.app.post('/login',
            {
                'submit': True,
                'Username': 'sontek',
                'Password': 'temp',
                'csrf_token': csrf
            }
        )

        assert res.status_int == 302

# Param injection example
#test_formats = ['html'] #, 'json', 'xml'

#def pytest_generate_tests (metafunc):
#    if 'format' in metafunc.fixturenames:
#        metafunc.parametrize('format', test_formats)
#if format:
#    url += '?format='+format
