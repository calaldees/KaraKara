version: '3.5'

volumes:
    website_static:
    #website_db:
    processmedia2_data:
    logs:
    mqtt_data:
    queue_data:

services:

    nginx:
        image: karakara/nginx
        build:
            context: ./nginx
        ports:
            - "127.0.0.1:${PORT_NGINX}:80"
        volumes:
            - website_static:/static:ro
            - logs:/logs
            - ${PATH_HOST_processed}:/media/processed:ro
            #- ${PWD}/nginx/nginx.conf:/etc/ngin/nginx.conf:ro  # for local development
        links:
            #- website
            #- mosquitto
            - api_queue
            - mqtt
            - player2
            - browser2
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.karakara.rule=Host(`${HOSTNAME}`)"
            - "traefik.http.routers.karakara.middlewares=kkcors,kkredir"
            - "traefik.http.middlewares.kkcors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
            - "traefik.http.middlewares.kkcors.headers.accesscontrolalloworiginlist=*"
            - "traefik.http.middlewares.kkcors.headers.accesscontrolmaxage=100"
            - "traefik.http.middlewares.kkcors.headers.addvaryheader=true"
            - "traefik.http.middlewares.kkredir.redirectregex.regex=^https://karakara.uk/$$"
            - "traefik.http.middlewares.kkredir.redirectregex.replacement=https://karakara.uk/browser2/"

    # website:
    #     image: karakara/website
    #     build:
    #         context: ./website
    #     env_file:
    #         - .env
    #     links:
    #         - postgres
    #         - redis
    #         - mosquitto
    #     volumes:
    #         - website_static:/static:rw  # website writes staic files to overlay
    #         - logs:/logs
    #         - ${PATH_HOST_source}:/media/source:ro  # The Community interface writes to this location, not too happy about this. Will discuss this with content creators.
    #         - ${PATH_HOST_meta}:/media/meta:ro

        ## for local development
        ##  docker-compose run --rm --entrypoint /bin/bash --service-ports website
        #     - ${PWD}/website:/app:ro
        # ports:
        #     - 6543:6543
        # #command: pserve ${PATH_CONFIG}/development.ini
        # healthcheck: 
        #     interval: 0m  # TODO: disbale healthcheck

    #mosquitto:
    #    image: karakara/mosquitto
    #    build:
    #        context: ./mosquitto
    #    volumes:
    #        - mosquitto_data:/mosquitto/data

    api_queue:
        image: karakara/api_queue
        build:
            context: ./api_queue
        environment:
            SANIC_MQTT: mqtt
            SANIC_TRACKS: /static/tracks.json  # TODO: same as `processmedia2/config.docker.json` - consider from ENV?
            SANIC_PATH_QUEUE: /data/queue/   # See volumes below
        #ports:  # for local dev
        #    - 8000:8000
        links:
            - mqtt
        volumes:
            - website_static:/static:ro
            - logs:/logs
            - queue_data:/data/queue/:rw

    mqtt:
        image: karakara/mqtt
        build:
            context: ./mqtt
        volumes:
            - mqtt_data:/mosquitto/data


    player2:
        image: karakara/player2
        build:
            context: ./player2

    browser2:
        image: karakara/browser2
        build:
            context: ./browser2

    # postgres:
    #     image: karakara/postgres
    #     build:
    #         context: ./postgres
    #     volumes:
    #         - website_db:/var/lib/postgresql/data

    # redis:
    #     image: redis

    processmedia2:
        image: karakara/processmedia2
        profiles:
            - processmedia
        build:
            context: ./processmedia2
        environment:
            - KARAKARA_PROCESSMEDIA2_CONFIG=config.docker.json
            # TODO "path_static_track_list" from env to link with `api_queue` location and maybe even `nginx`?
        env_file:
            - .env
        volumes:
            - logs:/logs
            - processmedia2_data:/data:rw   # does this prevent multiple encoding containers from running because of the `.lock`?
            - ${PATH_HOST_source}:/media/source:ro
            - ${PATH_HOST_meta}:/media/meta:rw
            - ${PATH_HOST_processed}:/media/processed:rw
            - website_static:/static:rw

        # Force import
        #docker-compose exec processmedia2 /bin/bash
        #root@245ee075bf91:/processmedia2# python3 import_media.py  --config config.docker.json --force

# docker-compose run --rm processmedia2 bash
# docker run -it --rm --entrypoint bash -v //C//Users/calal/code/personal/KaraKara/processmedia2/tests/source:/tmp/workdir jrottenberg/ffmpeg
