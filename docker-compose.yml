version: '3.5'

volumes:
    website_db:
    processmedia2_data:
    logs:

services:

    website:
        image: karakara/website:latest
        build:
            context: ./website
            dockerfile: Dockerfile
        env_file:
            - .env
        environment:
            STATIC_PROCESSMEDIA2_LOG: /logs/processmedia2-app.log
            SQLALCHEMY_URL: postgresql+pypostgresql://karakara:karakara@postgres/karakara
            CACHE_BACKEND: dogpile.cache.redis
            CACHE_BACKEND_ARGUMENTS: '{"host": "redis", "port": 6379} -> json'
            STATIC_PATH_SOURCE: ${PATH_CONTAINER_MEDIA}/source
            STATIC_PATH_META: ${PATH_CONTAINER_MEDIA}/meta
            #STATIC_PATH_PROCESSED: "path_processed": "{PATH_CONTAINER_MEDIA}/processed",
            #SESSION_SECRET: change_me
            KARAKARA_CONTAINER_NAME_postgres: 'postgres'
        links:
            - postgres
            - redis
            - websocket
        volumes:
            - logs:/logs
        #    - ./website:/app:ro  # Un-comment to use local source rather than built-in source
            - ${PATH_HOST_source}:${PATH_CONTAINER_MEDIA}/source:ro  # The Community interface writes to this location, not too happy about this. Will discuss this with content creators.
            - ${PATH_HOST_meta}:${PATH_CONTAINER_MEDIA}/meta:ro
        #    - ${LOGIN_GOOGLE_CLIENT_SECRET_FILE}:${LOGIN_GOOGLE_CLIENT_SECRET_FILE}:ro

    websocket:
        image: karakara/websocket:latest
        build:
            context: ./websocket
            dockerfile: Dockerfile
        volumes:
            - logs:/logs
        expose:
            - 9800

    player2:
        build:
            context: ./player2
            dockerfile: Dockerfile
        volumes:
            - logs:/logs
        #    - ./player2/src:/app/src  # Un-comment to use local source rather than built-in source

    postgres:
        build:
            context: ./postgres
            dockerfile: Dockerfile
        volumes:
            - logs:/logs
            - website_db:/var/lib/postgresql

    redis:
        image: redis
        expose:
            - 6379

    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        env_file:
            - .env
        ports:
            - "127.0.0.1:${PORT_NGINX}:80"
        volumes:
            - logs:/logs
            - ${PATH_HOST_processed}:/media/processed:ro
        links:
            - website
            - websocket
            - player2

    processmedia2:
        image: karakara/processmedia2:latest
        build:
            context: ./processmedia2
            dockerfile: Dockerfile
        links:
            - website
        env_file:
            - .env
        volumes:
            #- ./processmedia2:/processmedia2:ro  # Un-comment to use local source rather than built-in source
            - logs:/logs
            - processmedia2_data:/processmedia2/data
            - ${PATH_HOST_source}:${PATH_CONTAINER_MEDIA}/source:ro
            - ${PATH_HOST_meta}:${PATH_CONTAINER_MEDIA}/meta:rw
            - ${PATH_HOST_processed}:${PATH_CONTAINER_MEDIA}/processed:rw
        environment:
            KARAKARA_PROCESSMEDIA2_ENABLED: ${KARAKARA_PROCESSMEDIA2_ENABLED:-true}
            KARAKARA_RESCAN_INTERVAL_SECONDS: 600
            KARAKARA_PROCESSMEDIA2_CONFIG: config.docker.json
            KARAKARA_PROCESSMEDIA2_CLEANUP: 'false'
            KARAKARA_PROCESSMEDIA2_HEARTBEAT_FILE: 'data/.heartbeat'
            KARAKARA_CONTAINER_NAME_website: 'website'
        healthcheck:
            # Heartbeat file is defined in environ - as this is configurable the heathcheck did not feel right in the Dockerfile
            # TODO - can we use $KARAKARA_PROCESSMEDIA2_HEARTBEAT_FILE here?
            test: touch -d"-30min" /tmp/marker && [ /processmedia2/data/.heartbeat -nt /tmp/marker ]
            interval: 1m
            timeout: 3s
        # command: [
        #   'pytest',
        #   'processmedia_libs',
        #   'tests',
        #   '--doctest-modules',
        #   '--pdb',
        #   '-x',
        #   #'-k', 'test_get_image_from_video'
        # ]
        #command: ['make', 'test']

        # Force import
        #docker-compose exec processmedia2 /bin/bash
        #root@245ee075bf91:/processmedia2# python3 import_media.py  --config config.docker.json --force

    dashboard:
        build:
            context: ./dashboard
            dockerfile: Dockerfile
        volumes:
            - logs:/logs

# docker-compose run --rm processmedia2 bash
# docker run -it --rm --entrypoint bash -v //C//Users/calal/code/personal/KaraKara/processmedia2/tests/source:/tmp/workdir jrottenberg/ffmpeg
